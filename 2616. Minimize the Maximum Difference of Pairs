# This function solves the problem of minimizing the maximum difference in `p` pairs chosen from the array `nums`.
# - A valid pair is formed by two adjacent elements (after sorting), and their difference must be ≤ a threshold.
# - The goal is to choose `p` such non-overlapping pairs with the minimum possible value of the *maximum difference* among them.
# - The algorithm uses **binary search** on the possible range of maximum differences:
#     - For each candidate value `mid`, it greedily checks if it's possible to form at least `p` pairs with differences ≤ mid.
#     - If yes, it tries smaller values (to minimize); if not, it increases the range.

# Time Complexity:
# O(n * log(max_diff)), where:
#   - n = number of elements in `nums`
#   - max_diff = maximum possible difference = nums[-1] - nums[0]
#   - Sorting takes O(n log n), and binary search runs log(max_diff) iterations, each doing O(n) work for the greedy pairing.

# Space Complexity:
# O(1) — aside from input storage and sorting, only a constant amount of extra space is used.

class Solution:
    def minimizeMax(self, nums: list[int], p: int) -> int:
        nums.sort()
        n=len(nums)
        low,high=0,nums[-1]-nums[0]
        while low<high:
            mid=(low+high)//2
            count=0
            i=1
            while i<n and count<p:
                if nums[i]-nums[i-1]<=mid:
                    count+=1
                    i+=2
                else:
                    i+=1
            if count>=p:
                high=mid
            else:
                low=mid+1
        return low
