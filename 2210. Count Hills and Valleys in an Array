# - This function counts the number of hills and valleys in the list `nums`.
# - A **hill** is defined where nums[i] > nums[i-1] and nums[i] > nums[i+1].
# - A **valley** is where nums[i] < nums[i-1] and nums[i] < nums[i+1].
# - The loop skips flat regions (where adjacent elements are equal) by updating the `left` pointer only when a change occurs.
# - For each position i, we check if it forms a hill or valley with `nums[left]` and `nums[i+1]`.

# Time Complexity: O(n), where n is the length of the input list.
# Space Complexity: O(1), constant extra space used.

class Solution:
    def countHillValley(self, nums: List[int]) -> int:
        count = 0
        left = 0
        for i in range(1, len(nums) - 1):
            if nums[i] != nums[i + 1]:
                if (nums[i] > nums[left] and nums[i] > nums[i + 1]) or \
                   (nums[i] < nums[left] and nums[i] < nums[i + 1]):
                    count += 1
                left = i
        return count 
