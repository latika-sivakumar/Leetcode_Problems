# This function calculates the minimum number of deletions required so that the frequency of every character in the string `word` differs from every other character's frequency by at most `k`.

# Steps:
# - Count the frequency of each character.
# - Sort the frequencies.
# - For each unique base frequency in the sorted list:
#     - Delete characters from all lower frequencies entirely.
#     - For higher frequencies, delete the excess part so they don't exceed (base frequency + k).
# - Return the minimum deletions across all choices of base frequency.

# Time Complexity:
# O(n + m^2), where:
# - n = length of `word` (for building frequency count)
# - m = number of distinct characters (up to 26 for lowercase English letters)
# The nested loop over distinct frequencies contributes O(m^2), which is small and manageable.

# Space Complexity:
# O(m), for storing frequencies of characters (Counter + frequency list).

class Solution:
    def minimumDeletions(self, word: str, k: int) -> int:
        char_freq=Counter(word)
        freq_list=sorted(char_freq.values())
        total_chars=len(freq_list)
        min_deletions=float('inf')
        for i in range(total_chars):
            base_freq=freq_list[i]
            deletions=0
            for j in range(i):
                deletions+=freq_list[j]
            for j in range(i+1,total_chars):
                if freq_list[j]>base_freq+k:
                    deletions+=freq_list[j]-(base_freq+k)
            min_deletions=min(min_deletions,deletions)
        return min_deletions
