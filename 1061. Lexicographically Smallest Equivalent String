# This code solves the problem of finding the lexicographically smallest equivalent string.
# Given two strings `s1` and `s2` of the same length, each pair (s1[i], s2[i]) represents a character equivalence.
# Characters are considered equivalent in a transitive and symmetric way.
# Using this, for each character in `baseStr`, the code finds the lexicographically smallest character in its equivalence class (component).
# It does so by constructing a graph where each character is a node and edges represent equivalence. Then, for each character in `baseStr`, it performs DFS to find the smallest character in the connected component it belongs to.

# Time Complexity:
# O(N + M*(V + E)) where:
#   - N is the length of s1 (or s2) to build the graph → O(N)
#   - M is the length of baseStr, and for each character, DFS may visit V nodes and E edges → O(M*(V + E))
#   - Since V and E are limited to at most 26 characters (lowercase English letters), this becomes effectively O(N + M)

# Space Complexity:
# O(V + E + M) where:
#   - O(V + E) for the adjacency list
#   - O(M) for the result string and visited set for each DFS call
#   - V and E are limited to constant size (26 letters), so overall space is O(M)

from collections import defaultdict
class Solution(object):
    def smallestEquivalentString(self, s1, s2, baseStr):
        adj=defaultdict(list)
        for a,b in zip(s1,s2):
            adj[a].append(b)
            adj[b].append(a)
        def dfs(ch,visited):
            visited.add(ch)
            min_ch=ch
            for nei in adj[ch]:
                if nei not in visited:
                    candidate=dfs(nei,visited)
                    min_ch=min(min_ch,candidate)
            return min_ch
        result=[]
        for ch in baseStr:
            visited=set()
            result.append(dfs(ch,visited))
        return ''.join(result)
