# This function determines the k-th character in a sequence defined by a series of operations.
# - Each operation doubles the length of the sequence.
# - When the k-th position is beyond half the length at some operation step, k is adjusted and a counter `cnt` is incremented if the corresponding operation is 1.
# - Finally, the character returned is 'a' shifted by `cnt` positions cyclically over 26 letters.

# Time Complexity:
# O(n), where n = length of `operations`.
# The function iterates through `operations` once, backwards.

# Space Complexity:
# O(1), uses only a fixed number of variables regardless of input size.

class Solution:
    def kthCharacter(self, k: int, operations: List[int]) -> str:
        cnt=0
        n=len(operations)
        length=pow(2,n-1)
        for i in range(n-1,-1,-1):
            if k>length:
                k-=length
                if operations[i]==1:
                    cnt+=1
            length//=2
        return chr(ord('a')+(cnt%26))
