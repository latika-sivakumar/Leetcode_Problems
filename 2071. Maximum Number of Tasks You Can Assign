"""
Problem:
Given arrays 'tasks' (task difficulties) and 'workers' (worker strengths), determine the maximum number of tasks 
that can be assigned to workers such that:
- Each task is assigned to one worker.
- A worker can do a task if their strength â‰¥ task difficulty.
- If not, the worker can take a pill (if available) to boost their strength by a fixed 'strength' amount.
- A worker can take at most one pill.

Approach:
1. Sort both 'tasks' and 'workers' arrays.
2. Use binary search on the number of tasks (from 0 to min(len(tasks), len(workers))) to find the maximum feasible number.
3. For each mid (number of tasks to test), use a helper function `can_finish(mid, pills)` to check:
   - Can we assign `mid` easiest tasks to `mid` strongest workers using available pills as needed?
   - A deque is used to store task difficulties that a worker can attempt (with or without pills).
   - For each worker, try to assign a task:
     - Prefer tasks they can do without a pill.
     - If not, use a pill if available and assign them the hardest remaining feasible task.
4. Return the highest number of tasks that can be completed.
"""

from collections import deque
class Solution:
    def maxTaskAssign(self, tasks: List[int], workers: List[int], pills: int, strength: int) -> int:
        tasks.sort()
        workers.sort()
        def can_finish(mid,pills):
            n=len(workers)
            i=0
            queue=deque()
            for j in range(n-mid,n):  
                w=workers[j]
                while i<mid and tasks[i]<=w+strength:
                    queue.append(tasks[i])
                    i+=1
                if not queue:
                    return False
                if queue[0]<=w:
                    queue.popleft()
                else:
                    if pills==0:
                        return False
                    pills-=1
                    queue.pop()
            return True
        left=0
        right=min(len(tasks),len(workers))
        while left<right:
            mid=(left+right+1)//2
            if can_finish(mid,pills):
                left=mid
            else:
                right=mid-1
        return left
