# This function computes the earliest and latest possible rounds in which two players (firstPlayer and secondPlayer) can meet in a single-elimination tournament with `n` players.
# - Players face off in pairs from the outside-in (1 vs n, 2 vs n-1, etc.).
# - After each round, winners move to the next round, and players are re-paired similarly.
# - The meeting round depends on the path taken by both players.

# - A recursive DFS is used to explore all possible matchups across rounds.
# - The state (n, p1, p2) represents a round where `n` players remain and players `p1` and `p2` are alive.
# - The function computes:
#   - The minimum round when p1 and p2 can meet,
#   - The maximum round when they can meet,
#   - Based on all possible configurations and positions after each round.
# - The result is memoized by the call stack, though no explicit caching is used.

# Time Complexity:
# Exponential in the worst case — depends on the number of ways players can be arranged across rounds,
# especially since it explores multiple branches per recursive call.

# Space Complexity:
# O(n) for the recursion depth — each recursive call reduces `n` approximately by half per round.

class Solution:
    def earliestAndLatest(self, n: int, firstPlayer: int, secondPlayer: int) -> list[int]:
        def dfs(n, p1, p2):
            if p1 + p2 == n + 1:
                return (1, 1)
            if p1 > p2:
                p1, p2 = p2, p1
            if n <= 4:
                return (2, 2)
            m = (n + 1) // 2
            minR, maxR = float('inf'), float('-inf')
            if p1 - 1 > n - p2:
                t = n + 1 - p1
                p1 = n + 1 - p2
                p2 = t
            if p2 * 2 <= n + 1:
                a = p1 - 1
                b = p2 - p1 - 1
                for i in range(a + 1):
                    for j in range(b + 1):
                        r1, r2 = dfs(m, i + 1, i + j + 2)
                        minR = min(minR, r1 + 1)
                        maxR = max(maxR, r2 + 1)
            else:
                p4 = n + 1 - p2
                a = p1 - 1
                b = p4 - p1 - 1
                c = p2 - p4 - 1
                for i in range(a + 1):
                    for j in range(b + 1):
                        offset = i + j + 1 + (c + 1) // 2 + 1
                        r1, r2 = dfs(m, i + 1, offset)
                        minR = min(minR, r1 + 1)
                        maxR = max(maxR, r2 + 1)
            return (minR, maxR)
        return list(dfs(n, firstPlayer, secondPlayer))
