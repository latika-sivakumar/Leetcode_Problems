# This code counts the number of equivalent domino pairs in a given list.
# Two dominoes [a, b] and [c, d] are considered equivalent if they contain the same numbers,
# regardless of order (i.e., [a, b] == [b, a]).

# Approach:
# 1. Use a defaultdict to store the frequency of each unique domino pair.
#    To ensure that [a, b] and [b, a] are treated the same, each pair is sorted before storing.
# 2. After counting frequencies, for each unique pair with frequency `freq`,
#    the number of possible equivalent pairs is calculated using the combination formula:
#    freq * (freq - 1) // 2, which counts how many ways we can pick 2 dominoes from freq items.
# 3. Return the total number of such pairs.

# Time Complexity: O(n), where n is the number of dominoes.
#   - Each domino is processed once to generate the key and update the count.
#   - The second loop iterates over unique keys, which is at most 100 since 1 <= a, b <= 9.

# Space Complexity: O(k), where k is the number of unique domino keys (at most 100).
#   - The dictionary stores frequency counts for each unique normalized domino.

from collections import defaultdict
class Solution:
    def numEquivDominoPairs(self, dominoes):
        count_map=defaultdict(int)
        count=0
        for a,b in dominoes:
            key=tuple(sorted((a,b)))
            count_map[key]+=1
        for freq in count_map.values():
            count+=freq*(freq-1)//2
        return count
