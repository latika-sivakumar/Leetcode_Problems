# Counts the number of fair pairs (i, j) where i < j and the sum of nums[i] + nums[j] lies between 'lower' and 'upper' inclusive.
# The array is first sorted to enable binary search.
# For each index i, we use binary search to find how many j > i satisfy the sum condition.
# bisect_left finds the first position where nums[j] >= lower - nums[i]
# bisect_right finds the first position where nums[j] > upper - nums[i]
# The difference (right - left) gives the number of valid j values for each i.
# The total count is accumulated and returned.

class Solution:
    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:
        nums.sort()
        c=0
        for i in range(len(nums)):
            l=bisect_left(nums,lower-nums[i],i+1)
            r=bisect_right(nums,upper-nums[i],i+1)
            c+=r-l
        return c
