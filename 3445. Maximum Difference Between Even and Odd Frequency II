# This function computes the maximum difference between counts of digits in substrings of a string `s` under certain parity constraints.
# - The string `s` contains digits (0–4 assumed from the list size of 5).
# - The algorithm compares all ordered pairs of digit positions (q1, q2), where q1 and q2 represent positions of two different digits.
# - For each pair (q1, q2), it computes the maximum difference `i - j` between positions in their respective lists while respecting a window size constraint (distance ≥ k).
# - The `sol()` function:
#     - Uses BFS-like queues (`deque`) and parity states to track possible state transitions.
#     - Uses bit manipulation to differentiate between even/odd steps (`parity=(i&1)|((j&1)<<1)`).
#     - Keeps track of previous values for each parity to compute max differences optimally.

# Time Complexity:
# O(d^2 * n), where:
#   - d = number of distinct digits (≤ 5 here)
#   - n = length of string `s`
#   - There are O(d^2) digit pairs, and each `sol()` call processes up to O(n) positions per digit.

# Space Complexity:
# O(n), where:
#   - The `idx` list stores positions of each digit, up to n total.
#   - Additional deques and helper arrays (`que`, `prev`) are small and constant-sized (since they relate to 4 parity states).

class Solution:
    def maxDifference(self, s: str, k: int) -> int:
        idx=[[] for i in range(5)] 
        for i,c in enumerate(s):
            idx[int(c)].append(i)
        idx=[q for q in idx if len(q)] 
        n=len(s)
        for q in idx:
            q.append(n) 
        def sol(q1,q2): 
            que=[deque() for i in range(4)] 
            prev=[inf]*4 
            que[0].append((max(q1[0],q2[0],k-1),0))
            i=j=0;best=-inf
            curr=-1 
            while q1[i]!=q2[j]: 
                if q1[i]<q2[j]: 
                    if q1[i]>curr:
                        curr=q1[i]
                    i+=1
                else: 
                    if q2[j]>curr:
                        curr=q2[j]
                    j+=1
                right=min(q1[i],q2[j])-1  
                parity=(i&1)|((j&1)<<1) 
                prev_p=parity^1 
                while que[prev_p] and que[prev_p][0][0]<=right:
                    _,prev[prev_p]=que[prev_p].popleft()
                best=max(best,i-j-prev[prev_p])
                v=i-j
                if v<prev[parity] and ((not que[parity]) or v<que[parity][-1][1]):
                    que[parity].append((max(curr+k,q1[i],q2[j]),v))
            return best
        ans=-inf
        for q1,q2 in permutations(idx,2):
            ans=max(ans,sol(q1,q2))
        return ans
