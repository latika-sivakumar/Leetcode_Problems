"""
Problem:
Given a numeric string `num`, count the number of *balanced permutations* such that the digits can be split into two groups 
(of size floor(n/2) and ceil(n/2)) and both groups have the same sum of digits. The output should be modulo 10^9 + 7.

Approach:
1. Count the frequency of each digit in the string.
2. If the total sum of digits is odd, return 0 since we can't split into two equal halves.
3. Use dynamic programming (`dfs`) with memoization to recursively try distributing the digit counts into two halves.
4. Use precomputed binomial coefficients to calculate how many ways we can distribute digits among both halves.

Key Concepts:
- Combinatorics: Choose `l` occurrences of digit `i` for the first half and the remaining `r` = cnt[i] - l for the second.
- DFS + Memoization: Explore all valid ways to assign digits to two halves with the target sum.
- Pascal's Triangle: Precompute combination values (nCr) to avoid recomputation.

Time Complexity:
- O(n^2 * target * 10) in the worst case due to recursive DFS calls with 4D memoization.
  - Max 10 digit types, up to `n` digits, and target sum up to 9*n.
  - The DFS cache is indexed by (digit, target sum, left size, right size).

Space Complexity:
- O(n^2) for combination table.
- O(10 * target * n * n) for memoization (in worst-case number of states).

Returns:
- Integer count of all possible balanced permutations modulo 10^9 + 7.
"""

class Solution:
    def countBalancedPermutations(self, num: str) -> int:
        mod=10**9+7
        n=len(num)
        cnt=[0]*10
        s=0
        for c in num:
            d=int(c)
            cnt[d]+=1
            s+=d
        if s%2!=0:
            return 0
        target=s//2
        mx=n+1
        c=[[0]*mx for _ in range(mx)]
        for i in range(mx):
            c[i][0]=1
            for j in range(1,i+1):
                c[i][j]=(c[i-1][j]+c[i-1][j-1])%mod
        @cache
        def dfs(i: int, j: int, a: int, b: int) -> int:
            if i>9:
                return 1 if j==0 and a==0 and b==0 else 0
            if a==0 and j>0:
                return 0
            ans=0
            for l in range(min(cnt[i],a)+1):
                r=cnt[i]-l
                if r<0 or r>b:
                    continue
                if l*i>j:
                    continue
                t=(c[a][l]*c[b][r])%mod
                t=(t*dfs(i+1,j-l*i,a-l,b-r))%mod
                ans=(ans+t)%mod
            return ans
        return dfs(0,target,n//2,(n+1)//2)
