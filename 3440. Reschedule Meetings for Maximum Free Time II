# This function calculates the **maximum free time** achievable during a fixed `eventTime` period,
# given multiple scheduled events represented by `startTime` and `endTime`.
# - You are allowed to cancel at most one event to potentially increase the total free time.
# - The function returns the largest continuous period of time where no events are active.

# 1. Sort all events based on start time to form `intervals`.
# 2. Calculate `gaps` — the idle time before the first event, between events, and after the last event.
# 3. Use prefix (`maxBefore`) and suffix (`maxAfter`) arrays to track the maximum free time before and after any event.
# 4. For each event:
#    - Compute the combined free time of adjacent gaps if that event is removed.
#    - Check whether removing it would create a better free time than the current best.
#    - Update `maxFree` accordingly.
# 5. Finally, consider all raw gaps as well (in case removing an event isn’t needed).

# Time Complexity:
# O(n), where n is the number of events.
# - Sorting takes O(n log n)
# - Remaining operations (gaps, prefix/suffix arrays, and iteration) are all linear.

# Space Complexity:
# O(n), for storing the gaps, maxBefore, and maxAfter arrays.

class Solution:
    def maxFreeTime(self, eventTime: int, startTime: List[int], endTime: List[int]) -> int:
        n = len(startTime)
        intervals = sorted(zip(startTime, endTime))
        gaps = [intervals[0][0]]
        for i in range(1, n):
            gaps.append(intervals[i][0] - intervals[i - 1][1])
        gaps.append(eventTime - intervals[-1][1])
        maxBefore = [0] * (n + 2)
        maxAfter = [0] * (n + 2)
        for i in range(1, n + 1):
            maxBefore[i] = max(maxBefore[i - 1], gaps[i - 1])
        for i in range(n, 0, -1):
            maxAfter[i] = max(maxAfter[i + 1], gaps[i])
        maxFree = 0
        for i in range(n):
            duration = intervals[i][1] - intervals[i][0]
            leftGap = gaps[i]
            rightGap = gaps[i + 1]
            combinedGap = leftGap + rightGap
            bestGap = max(maxBefore[i] if i > 0 else 0, maxAfter[i + 2] if i < n - 1 else 0)
            if duration <= bestGap:
                maxFree = max(maxFree, combinedGap + duration)
            else:
                maxFree = max(maxFree, combinedGap)
        for gap in gaps:
            maxFree = max(maxFree, gap)
        return maxFree
