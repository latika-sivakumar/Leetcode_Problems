# - This function recursively generates Pascal's Triangle up to `numRows`.
# - Base cases: return empty list for 0 rows, or [[1]] for 1 row.
# - For each recursive call, get the triangle up to numRows - 1.
# - Then build the new row by summing adjacent elements from the last row.
# - Append the new row and return the updated triangle.

# Time Complexity: O(numRows^2), since each row has up to `numRows` elements and we compute all rows.
# Space Complexity: O(numRows^2), due to storing the entire triangle.

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        if numRows == 0:
            return []
        if numRows == 1:
            return [[1]]
        
        prevRows = self.generate(numRows - 1)
        newRow = [1] * numRows
        
        for i in range(1, numRows - 1):
            newRow[i] = prevRows[-1][i - 1] + prevRows[-1][i]
        
        prevRows.append(newRow)
        return prevRows
