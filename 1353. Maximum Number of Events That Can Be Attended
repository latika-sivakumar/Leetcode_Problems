# This function returns the maximum number of events that can be attended.
# - Each event is represented by a start and end day [start, end].
# - You can attend only one event per day.

# - Sort the events by start day.
# - Use a min-heap (priority queue) to track the end days of available events.
# - For each day from 1 to the last possible day:
#     - Add to the heap all events that start on or before this day.
#     - Remove events from the heap that have already expired (end day < current day).
#     - Attend the event that ends the earliest (min end day), if any.

# Time Complexity:
# O(N log N + D log N), where:
# - N is the number of events,
# - D is the range of days (from min start to max end),
# - Each heap operation is O(log N) and is done at most N times.

# Space Complexity:
# O(N), for storing events in the heap.

class Solution:
    def maxEvents(self, events: List[List[int]]) -> int:
        events.sort()
        pq=[]
        i,n,ans=0,len(events),0
        mxday=max(i[1] for i in events)
        for day in range(1,mxday+1):
            while i<n and events[i][0]<=day:
                heapq.heappush(pq,events[i][1])
                i+=1
            while pq and day>pq[0]:
                heapq.heappop(pq)
            if pq:
                heapq.heappop(pq)
                ans+=1
        return ans
