# This function finds the longest subsequence of words such that:
# - Each pair of consecutive words in the subsequence has a Hamming distance of exactly 1.
# - Each pair belongs to different groups (as given in the 'groups' list).
# The subsequence is returned in order.

# hamming_distance(str1, str2): Returns the number of differing positions between two strings of equal length.

# getWordsInLongestSubsequence(words, groups):
# - Uses dynamic programming to find the longest valid subsequence.
# - dp[i] stores the length of the longest valid subsequence ending at index i.
# - prev[i] helps reconstruct the actual sequence by tracking the previous word.

# Time Complexity: O(n^2 * m)
#   - n = number of words
#   - m = average length of each word (used in Hamming distance)

# Space Complexity: O(n)
#   - For dp and prev arrays used in dynamic programming.

def hamming_distance(str1,str2):
        dist=0
        if len(str1)!=len(str2):
            return False
        for i in range(len(str1)):
            if str1[i]!=str2[i]:
                dist+=1
        return dist

class Solution:
    def getWordsInLongestSubsequence(self, words: List[str], groups: List[int]) -> List[str]:
        dp=[1]*len(words)
        prev=[-1]*len(words)
        for i in range(len(words)):
            for j in range(i):
                if groups[i]!=groups[j] and hamming_distance(words[i],words[j])==1 and len(words[i])==len(words[j]):
                    if dp[j]+1>dp[i]:
                        dp[i]=dp[j]+1
                        prev[i]=j
        curr=dp.index(max(dp))
        res=[]
        while curr!=-1:
            res.append(words[curr])
            curr=prev[curr]
        return res[::-1]
