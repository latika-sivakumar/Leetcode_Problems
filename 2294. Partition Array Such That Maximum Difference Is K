# This function partitions the array `nums` into the **minimum number of subsequences** such that:
# - In each subsequence, the **difference between the maximum and minimum** elements is at most `k`.
# - The array is first sorted, then scanned from left to right.
# - Start a new partition whenever the current element exceeds the starting element of the current partition by more than `k`.

# Time Complexity:
# O(n log n), where n is the length of `nums`, due to sorting.
# - The loop afterward runs in O(n) time.

# Space Complexity:
# O(1), excluding the input and output, since only constant extra space is used (`ans` and `l`).

class Solution:
    def partitionArray(self, nums: list[int], k: int) -> int:
        nums.sort()
        ans=1
        l=0
        for i in range(1,len(nums)):
            if nums[i]-nums[l]>k:
                ans+=1
                l=i
        return ans
