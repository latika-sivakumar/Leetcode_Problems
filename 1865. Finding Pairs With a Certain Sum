# This class implements a data structure to support the following operations:
# 1. Initialization with two lists `nums1` and `nums2`.
# 2. `add(index, val)`: Increment the value at `index` in `nums2` by `val`, updating the frequency map.
# 3. `count(tot)`: Return the number of pairs (i, j) such that nums1[i] + nums2[j] == tot.

# - The constructor initializes `nums1`, `nums2`, and a frequency Counter of `nums2` for fast lookup.
# - `add()` adjusts the frequency map when an element in `nums2` is updated.
# - `count()` uses the frequency map of `nums2` to compute, for each `x` in `nums1`, how many `y` in `nums2` satisfy x + y == tot.

# Time Complexity:
# - `__init__`: O(n), where n = len(nums2), for building the frequency map.
# - `add`: O(1), constant time to update the Counter.
# - `count`: O(m), where m = len(nums1), since it loops through nums1.

# Space Complexity:
# O(n), for storing the frequency Counter of nums2.

from collections import Counter

class FindSumPairs:
    def __init__(self, nums1, nums2):
        self.n1 = nums1
        self.n2 = nums2
        self.freq = Counter(nums2)

    def add(self, index, val):
        old = self.n2[index]
        self.freq[old] -= 1
        self.n2[index] += val
        self.freq[self.n2[index]] += 1

    def count(self, tot):
        res = 0
        for x in self.n1:
            res += self.freq[tot - x]
        return res
