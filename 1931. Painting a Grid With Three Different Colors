"""
Problem: Color the Grid

This solution computes the number of ways to color an m x n grid using 3 different colors such that:
1. No two adjacent cells in a row have the same color.
2. No two cells in the same column in adjacent rows have the same color.

Approach:
- We represent each valid coloring of a row as a state using base-3 encoding.
- We generate all valid row states and construct an adjacency matrix between states that can follow each other in subsequent rows.
- We use dynamic programming (DP) to compute the number of valid colorings column by column (from left to right).
- The DP array `dp[i]` stores the number of ways to build the current column with the `i-th` valid row state.
- For each new column, we compute a new DP array `dp_next` using the adjacency matrix.

Functions:
- generate_valid_rows(m): Generates all valid row states of length m using base-3, ensuring no adjacent cells have the same color.
- build_adjacency_matrix(valid_rows): Builds a matrix where matrix[i][j] = True if valid row i can be followed by valid row j without color conflict in any column.

Time Complexity:
- Let V = number of valid row states = O(3^m)
- Generating valid rows: O(3^m * m)
- Building adjacency matrix: O(V^2 * m)
- DP computation for n columns: O(n * V^2)

Space Complexity:
- Valid rows list: O(V)
- Adjacency matrix: O(V^2)
- DP array: O(V)

Overall, the algorithm is efficient for small m (since V grows exponentially with m), but supports large n efficiently through DP.
"""

class Solution:
    def colorTheGrid(self, m: int, n: int) -> int:
        mod=1000000007
        valid_rows=self.generate_valid_rows(m)
        adj_matrix=self.build_adjacency_matrix(valid_rows)
        dp=[1]*len(valid_rows)
        for _ in range(n-1):
            dp_next=[0]*len(valid_rows)
            for i,row in enumerate(valid_rows):
                for j,adj_row in enumerate(valid_rows):
                    if adj_matrix[i][j]:
                        dp_next[j]+=dp[i]
                        dp_next[j]%=mod
            dp=dp_next
        return sum(dp)%mod

    def generate_valid_rows(self, m: int) -> list:
        valid_rows=[]
        for i in range(3**m):
            row=[]
            for j in range(m):
                row.append((i//(3**j))%3)
            if all(row[k]!=row[k+1] for k in range(m-1)):
                valid_rows.append(tuple(row))
        return valid_rows

    def build_adjacency_matrix(self, valid_rows: list) -> list:
        adj_matrix=[[False]*len(valid_rows) for _ in range(len(valid_rows))]
        for i,row1 in enumerate(valid_rows):
            for j,row2 in enumerate(valid_rows):
                if all(row1[k]!=row2[k] for k in range(len(row1))):
                    adj_matrix[i][j]=True
        return adj_matrix
