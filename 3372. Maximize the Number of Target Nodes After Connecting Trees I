"""
This class `Solution` contains two methods:
1. `bfs(start, adj, max_depth)`:
   - Performs a Breadth-First Search (BFS) from a given `start` node in an undirected graph represented by adjacency list `adj`.
   - The search is limited to a maximum depth `max_depth`.
   - Returns a set of all nodes reachable from the `start` node within `max_depth` hops (inclusive of the starting node).

2. `maxTargetNodes(edges1, edges2, k)`:
   - Constructs two undirected graphs using edge lists `edges1` and `edges2`.
   - For each node `i` in `edges1`, calculates the number of nodes reachable within `k` steps using BFS (`mydist1[i]`).
   - For each node `i` in `edges2`, calculates the maximum number of nodes reachable from any node in `edges2` within `k-1` steps (`mydist2`).
   - Returns a list where each element is the sum of `mydist2` and the corresponding value in `mydist1`.

Use case:
- This can be used in scenarios where you have two related network graphs and you want to compute influence/reach of nodes from the first graph (`edges1`) boosted by the maximum influence in the second graph (`edges2`) within certain hop limits (`k` and `k-1`).

Time Complexity:
- Let N1 = number of nodes in `edges1` (derived as max node index + 1)
- Let N2 = number of nodes in `edges2`
- Let E1 = number of edges in `edges1`
- Let E2 = number of edges in `edges2`

- Building adjacency lists: O(E1 + E2)
- For each node in `edges1`:
    * BFS takes O(N1 + E1) in worst case (but bounded by `k`)
    * Total for all N1 nodes = O(N1 * (N1 + E1))
- For each node in `edges2`:
    * BFS takes O(N2 + E2)
    * Total for all N2 nodes = O(N2 * (N2 + E2))

=> Total Time Complexity = O(N1 * (N1 + E1) + N2 * (N2 + E2))

Space Complexity:
- Adjacency lists: O(N1 + E1 + N2 + E2)
- Visited sets and queues per BFS call: O(N1) and O(N2)
- Output list: O(N1)

=> Total Space Complexity = O(N1 + E1 + N2 + E2)
"""

class Solution:
    def bfs(self, start: int, adj: List[List[int]], max_depth: int) -> set:
        visited=set()
        queue=deque([(start,0)])
        visited.add(start)
        while queue:
            node,depth=queue.popleft()
            if depth==max_depth:
                continue
            for neighbor in adj[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append((neighbor,depth+1))
        return visited
    def maxTargetNodes(self, edges1: List[List[int]], edges2: List[List[int]], k: int) -> List[int]:
        n1=max(max(u,v) for u,v in edges1)+1
        n2=max(max(u,v) for u,v in edges2)+1
        if k==0:
            return [1]*n1
        adj1=[[] for _ in range(n1+1)]
        adj2=[[] for _ in range(n2+1)]
        for u,v in edges1:
            adj1[u].append(v)
            adj1[v].append(u)
        for u,v in edges2:
            adj2[u].append(v)
            adj2[v].append(u)
        mydist1=[]
        mydist2=0
        for i in range(n1):
            reachable_from_adj1=self.bfs(i,adj1,k)
            mydist1.append(len(reachable_from_adj1))
        for i in range(n2):
            reachable_from_adj2=self.bfs(i,adj2,k-1)
            mydist2=max(mydist2,len(reachable_from_adj2))
        return [mydist2+i for i in mydist1]
